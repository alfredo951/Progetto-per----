import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
import { Root } from './user';
import { DocumentI } from '../components/Stepper';

export const initialState:IinitialState = {
  documneto: null,
  status: 'idle',
  user:null
};

export interface IinitialState{
  documneto:DocumentI | null,
  status:string
  user:Root|null
}












// asynchronous function with createAsyncThunk
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async () => {
    const response = await axios.get<Root>("https://rickandmortyapi.com/api/character") ;
    console.log(response.data)
    return response.data;
  }
);
export const counterSlice = createSlice({
    name: 'counter',
    initialState:initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      setDocument: (state,action) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
        state.documneto =action.payload;
      },
      removeDocument: (state) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
        state.documneto =null;
      },

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(incrementAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(incrementAsync.fulfilled, (state, action) => {
          state.status = 'idle';
          state.user = action.payload;
        })
        .addCase(incrementAsync.rejected, (state) => {
            state.status = 'failed';
        
          });
    },
  });
  export const { setDocument,removeDocument} = counterSlice.actions;
  // more code...
  export default counterSlice.reducer;